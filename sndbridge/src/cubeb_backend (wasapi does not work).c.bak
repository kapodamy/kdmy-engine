#include <stdio.h>
#include <assert.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdarg.h>

#ifdef _WIN32
#include <objbase.h>
#endif

#include "cubeb/cubeb.h"
#include "oggdecoder.h"

static OggDecoder* decoder = NULL;
static int32_t bytes_per_channel = 0;
static int32_t sample_rate = 0;

typedef struct {
    OggDecoder* decoder;
    volatile bool stop;
} UserData_t;


static int32_t read(void* stream, void* buffer, int32_t buffer_size) {
    return fread(buffer, 1, buffer_size, (FILE*)stream);
}
static int64_t seek(void* stream, int64_t offset, int32_t whence) {
    return fseek((FILE*)stream, offset, whence);
}
static int64_t tell(void* stream) {
    return ftell((FILE*)stream);
}
static void init_decoder() {
    FILE* file = fopen("./opus.ogg", "rb");
    assert(file);
    decoder = oggdecoder_init(file, read, seek, tell);
    assert(decoder);

    double duration;
    oggdecoder_get_info(decoder, &sample_rate, &bytes_per_channel, &duration);

    bytes_per_channel *= 2;
}



static const char* state_to_string(cubeb_state state) {
    switch (state) {
    case CUBEB_STATE_STARTED:
        return "CUBEB_STATE_STARTED";
    case CUBEB_STATE_STOPPED:
        return "CUBEB_STATE_STOPPED";
    case CUBEB_STATE_DRAINED:
        return "CUBEB_STATE_DRAINED";
    case CUBEB_STATE_ERROR:
        return "CUBEB_STATE_ERROR";
    default:
        return "Undefined state";
    }
}

static const char* device_type_to_string(cubeb_device_type type) {
    switch (type) {
    case CUBEB_DEVICE_TYPE_INPUT:
        return "input";
    case CUBEB_DEVICE_TYPE_OUTPUT:
        return "output";
    case CUBEB_DEVICE_TYPE_UNKNOWN:
        return "unknown";
    default:
        assert(false);
    }
    return NULL;
}

static const char* device_state_to_string(cubeb_device_state state) {
    switch (state) {
    case CUBEB_DEVICE_STATE_DISABLED:
        return "disabled";
    case CUBEB_DEVICE_STATE_UNPLUGGED:
        return "unplugged";
    case CUBEB_DEVICE_STATE_ENABLED:
        return "enabled";
    default:
        assert(false);
    }
    return NULL;
}

void print_log(const char* msg, ...) {
    va_list args;
    va_start(args, msg);
    vprintf(msg, args);
    va_end(args);
}

void output_device_changed_callback_s(cubeb* context, void* user) {
    (void)context;
    (void)user;
    //fprintf(stderr, "output_device_changed_callback_s\n");
}

static uint8_t buffer[16 * 1024];
static int32_t buffer_in_hold = 0;
static long user_data_cb_s(cubeb_stream* stm, void* user, const void* ib, void* output_buffer, long nframes) {
    (void)stm;
    (void)ib;

    UserData_t* userdata = (UserData_t*)user;
    if (userdata->stop) return 0;

    int32_t to_write = nframes * 4;
    int32_t required_bytes = to_write - buffer_in_hold;

    while (required_bytes > 0) {
        int32_t readed = oggdecoder_read(userdata->decoder, buffer + buffer_in_hold, required_bytes);
        if (readed < 1) break;
        required_bytes -= readed;
        buffer_in_hold += readed;
    }

    int32_t written = to_write < buffer_in_hold ? to_write : buffer_in_hold;
    memcpy(output_buffer, buffer, written);

    buffer_in_hold -= written;
    memmove(buffer, buffer + written, buffer_in_hold);

    return written / 4;
}

static void user_state_cb_s(cubeb_stream* stm, void* user, cubeb_state state) {
    (void)stm;
    (void)user;
    fprintf(stderr, "user_state_cb_s() state is %s\n", state_to_string(state));
}

static cubeb_devid choose_device(cubeb* context, cubeb_device_type type) {
    cubeb_device_collection collection;
    if (cubeb_enumerate_devices(context, type, &collection) == CUBEB_ERROR_NOT_SUPPORTED) {
        fprintf(stderr, "Not support %s device selection. Force to use default device\n", device_type_to_string(type));
        return NULL;
    }

    fprintf(stderr, "Found %zu %s devices. Choose one:\n", collection.count, device_type_to_string(type));
    fprintf(stderr, "# 0\n\tname: system default device\n");
    for (size_t i = 0; i < collection.count; i++) {
        assert(collection.device[i].type == type);
        fprintf(
            stderr,
            "# %zu %s\n"
            "\tname: %s\n"
            "\tdevice id: %s\n"
            "\tmax channels: %u\n"
            "\tstate: %s\n",
            i + 1,
            collection.device[i].preferred ? " (PREFERRED)" : "",
            collection.device[i].friendly_name, collection.device[i].device_id,
            collection.device[i].max_channels,
            device_state_to_string(collection.device[i].state)
        );
    }

    int choice;
    scanf(" %i", &choice);

    cubeb_devid choosen;
    if (choice == 0)
        choosen = NULL;
    else
        choosen = collection.device[choice - 1].devid;
    cubeb_device_collection_destroy(context, &collection);

    return choosen;
}

int main() {
    int rv;

#ifdef _WIN32
    CoInitialize(NULL);
    //fprintf(stderr, "CoInitializeEx() result=(bool)%i\n", CoInitializeEx(NULL, COINIT_MULTITHREADED) == S_OK);
#endif

    init_decoder();

    if (cubeb_set_log_callback(CUBEB_LOG_NORMAL, print_log) != CUBEB_OK) {
        fprintf(stderr, "Set log callback failed\n");
    }

    cubeb* context = NULL;
    rv = cubeb_init(&context, "Cubeb Test Application", "wasapi");
    if (rv != CUBEB_OK) {
        fprintf(stderr, "Could not init cubeb\n");
        return 1;
    }

    fprintf(stderr, "Init cubeb backend: %s\n", cubeb_get_backend_id(context));

    cubeb_device_collection_changed_callback callback = output_device_changed_callback_s;
    rv = cubeb_register_device_collection_changed(context, CUBEB_DEVICE_TYPE_OUTPUT, callback, NULL);
    if (rv != CUBEB_OK) {
        fprintf(stderr, "cubeb_register_device_collection_changed() register failed\n");
    }

    UserData_t* userdata = malloc(sizeof(UserData_t));
    userdata->decoder = decoder;
    userdata->stop = false;

    cubeb_stream* stream = NULL;
    cubeb_stream_params output_params = {
        .channels = 2,
        .rate = sample_rate,
        .format = CUBEB_SAMPLE_S16NE,
        .layout = CUBEB_LAYOUT_STEREO,
        .prefs = CUBEB_STREAM_PREF_NONE
    };
    cubeb_devid output_device = choose_device(context, CUBEB_DEVICE_TYPE_OUTPUT);

    uint32_t latency = 0;
    rv = cubeb_get_min_latency(context, &output_params, &latency);
    if (rv != CUBEB_OK) {
        fprintf(stderr, "Could not get min latency.");
    }

    rv = cubeb_stream_init(
        context,
        &stream,
        "Stream",
        NULL,
        NULL,
        output_device,
        &output_params,
        latency,
        user_data_cb_s,
        user_state_cb_s,
        userdata
    );
    if (rv != CUBEB_OK) {
        fprintf(stderr, "Could not open the stream, %i\n", rv);
        return false;
    }
    fprintf(stderr, "stream_init succeed\n");

    rv = cubeb_stream_start(stream);
    if (rv != CUBEB_OK) {
        fprintf(stderr, "Could not start the stream\n");
        return -1;
    }

    Sleep(10000);
    userdata->stop = true;
    Sleep(500);

    ///////////////////////////////////////////////////////////
    rv = cubeb_stream_stop(stream);
    if (rv != CUBEB_OK) {
        fprintf(stderr, "Could not stop the stream\n");
    }

    cubeb_stream_destroy(stream);

    rv = cubeb_register_device_collection_changed(context, CUBEB_DEVICE_TYPE_OUTPUT, NULL, NULL);
    if (rv != CUBEB_OK) {
        fprintf(stderr, "cubeb_register_device_collection_changed() unregister failed\n");
    }

    cubeb_set_log_callback(CUBEB_LOG_NORMAL, NULL);

    cubeb_destroy(context);
    
    return 0;
}